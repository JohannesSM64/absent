#!/bin/bash
# Tool for Arch Linux to quickly search a tree of PKGBUILDs and build packages.
# Written by Johannes Lang√∏y, 2010-2013. Public domain.

searchdirs=("/var/abs/core" "/var/abs/extra" "/var/abs/community")
builddir="/tmp/absent-$USER"
makepkgargs="-fsci"

color1=$'\e[1;31m'
color2=$'\e[1;34m'
color3=$'\e[1;33m'
ec=$'\e[0m' # end color

xdgconf="${XDG_CONFIG_HOME:-$HOME/.config}/absent/absentrc"
if [[ -r "$xdgconf" ]]; then
	source "$xdgconf"
elif [[ -r ~/.absentrc ]]; then
	source ~/.absentrc
fi

function usage {
	echo "absent -S [names]: find [names] in \$searchdirs and build in \$builddir."
	echo "absent -Sn [names]: Same as above, but non-interactive."
	echo "absent [string]: Search with number selection."
	echo "absent -h|--help: This message."
	echo
	echo "Variables you can set in ${xdgconf/$HOME/~} or ~/.absentrc:"
	echo "\$searchdirs (currently ${searchdirs[@]:-undefined}):"
	echo "  Array of directories to recursively search."
	echo "  absent will look for a directory named like your search/names, containing a PKGBUILD."
	echo "\$builddir (currently ${builddir:-undefined}):"
	echo "  The directory absent will use for copying to and building in."
	echo "\$makepkgargs (currently ${makepkgargs:-undefined}):"
	echo "  Default makepkg arguments."
}

function yesno {
	echo -n "$* [Y/n] "
	read -r
	case "$REPLY" in
		(''|[yY]*) return 0 ;;
		(*) return 1 ;;
	esac
}

function interactive {
	if [[ -f "/etc/customizepkg.d/${1##*/}" ]] && yesno "${color3}::${ec} Use customizepkg modifications?"; then
		customizepkg --modify
	fi
	if yesno "${color3}::${ec} Edit PKGBUILD?"; then
		# No quotes so $EDITOR is split into separate words, allowing arguments
		${EDITOR:-vi} PKGBUILD
	fi
	unset install
	source PKGBUILD
	if [[ -n "$install" ]]; then
		if yesno "${color3}::${ec} Edit ${install}?"; then
			${EDITOR:-vi} "$install"
		fi
	fi
	if [[ -n "$makepkgargs" ]] && ! yesno "${color3}::${ec} Use \$makepkgargs ($makepkgargs)?"; then
		echo -n "${color3}::${ec} Enter arguments to pass to makepkg: "
		read -r makepkgargs
	fi
}

if [[ -z "$1" ]]; then
	usage
	exit
fi

for dir in "${searchdirs[@]}"; do
	if [[ ! -d "$dir" ]]; then
		echo "${color1}::${ec} One or more of the directories in \$searchdirs (${searchdirs[@]}) not found."
		exit 1
	fi
done

case "$1" in
	-S|-Sn)
		[[ "$1" = -S ]] && intv=1
		shift
		for name in "$@"; do
			# For performance, try non-recursively first, then recursively.
			unset match
			for dir in "${searchdirs[@]}"; do
				if [[ -d "$dir/$name" && -f "$dir/$name/PKGBUILD" ]]; then
					match="$dir/$name"
				fi
			done
			if [[ -z "$match" ]]; then
				if ! read -r match < <(find "${searchdirs[@]}" -name "$name") && ! [[ -r "$match/PKGBUILD" ]]; then
					echo "${color1}::${ec} $name not found in ${searchdirs[@]}."
					exit 1
				fi
			fi
			matchdir="${match%/*}"
			builddir="$builddir/${matchdir##*/}"
			if ! mkdir -p "$builddir"; then
				echo "${color1}::${ec} Fix your \$builddir."
			fi
			echo "${color2}::$ec $name found in $matchdir."
			if (( intv )); then
				if yesno "${color3}::${ec} Sync $name from abs?"; then
					sudo abs "$1"
				fi
			fi
			cp -r "$match" "$builddir" || exit
			cd "$builddir/$name"
			rm -rf pkg src
			if (( intv )); then
				interactive "$match" || exit
			fi
			# Not ideal solution here I think. $makepkgargs cannot contain
			# multi-word arguments (?)
			makepkg $makepkgargs || exit
		done
		;;
	-h|--help)
		usage
		exit
		;;
	*)
		for i in "$(find "${searchdirs[@]}" -type d -name "*$**")"; do
			if [[ -f $i/PKGBUILD ]]; then
				list+=("$i")
			fi
		done
		if [[ -z $list ]]; then
			echo "${color1}::$ec No matches found in ${searchdirs[@]}."
			exit
		fi
		select match in "${list[@]}"; do
			[[ -z "$match" ]] && exit
			name="${match##*/}"
			matchdir="${match%/*}"
			builddir="${builddir}/${matchdir##*/}"
			if ! mkdir -p "$builddir"; then
				echo "${color1}::${ec} Fix your \$builddir."
			fi
			if yesno "${color3}::${ec} Sync $match from abs?"; then
				sudo abs "$match"
			fi
			cp -r "$match" "$builddir" || exit
			cd "$builddir/$name"
			interactive "$match" || exit
			makepkg $makepkgargs || exit
			break
		done
		;;
esac
